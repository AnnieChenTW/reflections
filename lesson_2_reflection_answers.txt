What happens when you initialize a repository? Why do you need to do it?
It creates an hidden directory ready for storing the metadata about the history of the repository.
In this way I can track the version history of all the files in the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
 Staging area contains the files in the working directory that you want to track.
 It helps you to organize your commit, which means you can update multiples files to the repository in one commit.
 
How can you use the staging area to make sure you have one commit per logical
change?
Ans: save the file to the staging area every time you complete a logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
You can use branches when you want to explore pretty significant changes in the code base, architecture differences at a very low level
without fear of breaking the entire project. 

How do the diagrams help you visualize the branch structure?
The diagrams show you the nodes where a branch starts and ends compare to another branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
Merging two branches together will combine all the changes in the commits of the two branches. 
We represent it in the diagram to you can know when the branch starts to diverge and when they are combined and what happens in between.
 
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

Git's automatic merging
Pros: it will do merging automatically for you
Cons: you need to resolve the merge conflict if Git can't do it for you
Always doing merges manually
Pros: You will know what has been merged together
Cons: You have to manually find out what should be merged together.