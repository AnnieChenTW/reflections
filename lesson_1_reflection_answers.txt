How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    The command lists the difference betwen two versions so that I don't have to go through every line of the code to find the bug.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    I can efficienly find out the problem or bug.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    The advantage of manually choosing is that I can check and make sure the changes is what I want before create a commit.
	The disadvantage is that the change size might be too big or too small.
	The advantage of automatically saving is that it helps you to save the changes but might save more copies than needed.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because Git is a version control system specifically for code. 
	Git was design with code in mind.
	And when you work on a project, you often have multiple files that you want to check together.

How can you use the commands git log and git diff to view the history of files?

    Git log shows every commit in a given repository and git diff gives the difference between two commits. 

How might using version control make you more confident to make changes that
could break something?

    You don't have to worry about make wrong changes because version control allows you to easily go back to whichever version you want.

Now that you have your workspace set up, what do you want to try using Git for?

    I want to use Git to manage the versions of my pragramming codes and view others' sample code as well.
